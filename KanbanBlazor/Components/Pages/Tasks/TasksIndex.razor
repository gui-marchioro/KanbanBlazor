@page "/Tasks"

@using KanbanBlazor.Data.Services
@using KanbanBlazor.Models

@inject TasksService _tasksService

<h1>Tasks</h1>

@if (tasks is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div>
		<button class="btn btn-primary" @onclick="(() => NewTaskModal())">New Task</button>
	</div>

	<TasksDetailModal @ref="TaskModal" DataChanged="@OnDataChanged" />

	<TaskDeleteModal @ref="DeleteTaskModal" TaskDeleted="@OnTaskDeleted" />

	<table class="table table-striped">
		<thead>
			<tr>
				<td>Title</td>
				<td>Description</td>
				<td>Status</td>
				<td>Group List</td>
				<td>Edit</td>
				<td>Delete</td>
			</tr>
		</thead>
		<tbody>
			@foreach (var task in tasks)
			{
				<tr>
					<td>@task.Title</td>
					<td>@task.Description</td>
					<td>@task.Status</td>
					<td>@task.ListGroup?.Name</td>
					<td>
						<input type="button" class="btn btn-primary" @onclick="(() =>EditTaskModal(task))" value="Edit" />
					</td>
					<td>
						<input type="button" class="btn btn-danger" @onclick="(() =>ShowConfirmDeleteTaskModal(task))" value=" Delete" />
					</td>
				</tr>
			}
		</tbody>
	</table>
}


@code {
	private List<Activity>? tasks;

	private TasksDetailModal TaskModal { get; set; }

	private TaskDeleteModal DeleteTaskModal { get; set; }

	protected override async Task OnInitializedAsync()
	{
		tasks = await _tasksService.GetAllTasks();
	}

	private void NewTaskModal()
	{
		TaskModal.task = new Activity();
		TaskModal.Header = "New Task";
		TaskModal.Open();
	}

	private void EditTaskModal(Activity task)
	{
		TaskModal.task = task;
		TaskModal.Header = task.Title;
		TaskModal.Open();
	}

	private async void OnDataChanged()
	{
		tasks = await _tasksService.GetAllTasks();
		StateHasChanged(); // Make the list of tasks to reload after a task is added/edited
	}

	private void ShowConfirmDeleteTaskModal(Activity task)
	{
		DeleteTaskModal.task = task;
		DeleteTaskModal.Open();
	}

	private async void OnTaskDeleted()
	{
		tasks = await _tasksService.GetAllTasks();
		StateHasChanged();
	}
}
